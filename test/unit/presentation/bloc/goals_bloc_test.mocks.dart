// Mocks generated by Mockito 5.4.6 from annotations
// in day_scheduler/test/unit/presentation/bloc/goals_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:day_scheduler/features/goals/data/goals_repository_impl.dart'
    as _i2;
import 'package:day_scheduler/features/goals/domain/entities/goal.dart' as _i5;
import 'package:day_scheduler/features/goals/domain/usecases/goal_usecases.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIGoalsRepository_0 extends _i1.SmartFake
    implements _i2.IGoalsRepository {
  _FakeIGoalsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetGoalsByDate].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGoalsByDate extends _i1.Mock implements _i3.GetGoalsByDate {
  MockGetGoalsByDate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGoalsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIGoalsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IGoalsRepository);

  @override
  _i4.Future<List<_i5.Goal>> call(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#call, [date]),
            returnValue: _i4.Future<List<_i5.Goal>>.value(<_i5.Goal>[]),
          )
          as _i4.Future<List<_i5.Goal>>);
}

/// A class which mocks [AddGoal].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddGoal extends _i1.Mock implements _i3.AddGoal {
  MockAddGoal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGoalsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIGoalsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IGoalsRepository);

  @override
  _i4.Future<void> call(_i5.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UpdateGoal].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateGoal extends _i1.Mock implements _i3.UpdateGoal {
  MockUpdateGoal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGoalsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIGoalsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IGoalsRepository);

  @override
  _i4.Future<void> call(_i5.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#call, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteGoal].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteGoal extends _i1.Mock implements _i3.DeleteGoal {
  MockDeleteGoal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGoalsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIGoalsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IGoalsRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
