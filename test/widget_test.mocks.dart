// Mocks generated by Mockito 5.4.6 from annotations
// in day_scheduler/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:day_scheduler/features/goals/domain/usecases/goal_usecases.dart'
    as _i2;
import 'package:day_scheduler/features/goals/presentation/bloc/goals_bloc.dart'
    as _i3;
import 'package:day_scheduler/features/schedule/domain/usecases/schedule_usecases.dart'
    as _i6;
import 'package:day_scheduler/features/schedule/presentation/bloc/schedule_bloc.dart'
    as _i7;
import 'package:day_scheduler/features/todos/domain/usecases/todo_usecases.dart'
    as _i4;
import 'package:day_scheduler/features/todos/presentation/bloc/todos_bloc.dart'
    as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetGoalsByDate_0 extends _i1.SmartFake
    implements _i2.GetGoalsByDate {
  _FakeGetGoalsByDate_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddGoal_1 extends _i1.SmartFake implements _i2.AddGoal {
  _FakeAddGoal_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateGoal_2 extends _i1.SmartFake implements _i2.UpdateGoal {
  _FakeUpdateGoal_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteGoal_3 extends _i1.SmartFake implements _i2.DeleteGoal {
  _FakeDeleteGoal_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoalsState_4 extends _i1.SmartFake implements _i3.GoalsState {
  _FakeGoalsState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTodosByDate_5 extends _i1.SmartFake
    implements _i4.GetTodosByDate {
  _FakeGetTodosByDate_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddTodo_6 extends _i1.SmartFake implements _i4.AddTodo {
  _FakeAddTodo_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateTodo_7 extends _i1.SmartFake implements _i4.UpdateTodo {
  _FakeUpdateTodo_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteTodo_8 extends _i1.SmartFake implements _i4.DeleteTodo {
  _FakeDeleteTodo_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTodosState_9 extends _i1.SmartFake implements _i5.TodosState {
  _FakeTodosState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetSchedulesByDate_10 extends _i1.SmartFake
    implements _i6.GetSchedulesByDate {
  _FakeGetSchedulesByDate_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddSchedule_11 extends _i1.SmartFake implements _i6.AddSchedule {
  _FakeAddSchedule_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateSchedule_12 extends _i1.SmartFake
    implements _i6.UpdateSchedule {
  _FakeUpdateSchedule_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteSchedule_13 extends _i1.SmartFake
    implements _i6.DeleteSchedule {
  _FakeDeleteSchedule_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScheduleState_14 extends _i1.SmartFake implements _i7.ScheduleState {
  _FakeScheduleState_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GoalsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoalsBloc extends _i1.Mock implements _i3.GoalsBloc {
  MockGoalsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetGoalsByDate get getGoalsByDate =>
      (super.noSuchMethod(
            Invocation.getter(#getGoalsByDate),
            returnValue: _FakeGetGoalsByDate_0(
              this,
              Invocation.getter(#getGoalsByDate),
            ),
          )
          as _i2.GetGoalsByDate);

  @override
  _i2.AddGoal get addGoal =>
      (super.noSuchMethod(
            Invocation.getter(#addGoal),
            returnValue: _FakeAddGoal_1(this, Invocation.getter(#addGoal)),
          )
          as _i2.AddGoal);

  @override
  _i2.UpdateGoal get updateGoal =>
      (super.noSuchMethod(
            Invocation.getter(#updateGoal),
            returnValue: _FakeUpdateGoal_2(
              this,
              Invocation.getter(#updateGoal),
            ),
          )
          as _i2.UpdateGoal);

  @override
  _i2.DeleteGoal get deleteGoal =>
      (super.noSuchMethod(
            Invocation.getter(#deleteGoal),
            returnValue: _FakeDeleteGoal_3(
              this,
              Invocation.getter(#deleteGoal),
            ),
          )
          as _i2.DeleteGoal);

  @override
  _i3.GoalsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeGoalsState_4(this, Invocation.getter(#state)),
          )
          as _i3.GoalsState);

  @override
  _i8.Stream<_i3.GoalsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i3.GoalsState>.empty(),
          )
          as _i8.Stream<_i3.GoalsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i3.GoalsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.GoalsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.GoalsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.GoalsEvent>(
    _i9.EventHandler<E, _i3.GoalsState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i3.GoalsEvent, _i3.GoalsState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i3.GoalsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TodosBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosBloc extends _i1.Mock implements _i5.TodosBloc {
  MockTodosBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetTodosByDate get getTodosByDate =>
      (super.noSuchMethod(
            Invocation.getter(#getTodosByDate),
            returnValue: _FakeGetTodosByDate_5(
              this,
              Invocation.getter(#getTodosByDate),
            ),
          )
          as _i4.GetTodosByDate);

  @override
  _i4.AddTodo get addTodo =>
      (super.noSuchMethod(
            Invocation.getter(#addTodo),
            returnValue: _FakeAddTodo_6(this, Invocation.getter(#addTodo)),
          )
          as _i4.AddTodo);

  @override
  _i4.UpdateTodo get updateTodo =>
      (super.noSuchMethod(
            Invocation.getter(#updateTodo),
            returnValue: _FakeUpdateTodo_7(
              this,
              Invocation.getter(#updateTodo),
            ),
          )
          as _i4.UpdateTodo);

  @override
  _i4.DeleteTodo get deleteTodo =>
      (super.noSuchMethod(
            Invocation.getter(#deleteTodo),
            returnValue: _FakeDeleteTodo_8(
              this,
              Invocation.getter(#deleteTodo),
            ),
          )
          as _i4.DeleteTodo);

  @override
  _i5.TodosState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTodosState_9(this, Invocation.getter(#state)),
          )
          as _i5.TodosState);

  @override
  _i8.Stream<_i5.TodosState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i5.TodosState>.empty(),
          )
          as _i8.Stream<_i5.TodosState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i5.TodosEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.TodosEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.TodosState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.TodosEvent>(
    _i9.EventHandler<E, _i5.TodosState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i5.TodosEvent, _i5.TodosState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i5.TodosState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ScheduleBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockScheduleBloc extends _i1.Mock implements _i7.ScheduleBloc {
  MockScheduleBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetSchedulesByDate get getSchedulesByDate =>
      (super.noSuchMethod(
            Invocation.getter(#getSchedulesByDate),
            returnValue: _FakeGetSchedulesByDate_10(
              this,
              Invocation.getter(#getSchedulesByDate),
            ),
          )
          as _i6.GetSchedulesByDate);

  @override
  _i6.AddSchedule get addSchedule =>
      (super.noSuchMethod(
            Invocation.getter(#addSchedule),
            returnValue: _FakeAddSchedule_11(
              this,
              Invocation.getter(#addSchedule),
            ),
          )
          as _i6.AddSchedule);

  @override
  _i6.UpdateSchedule get updateSchedule =>
      (super.noSuchMethod(
            Invocation.getter(#updateSchedule),
            returnValue: _FakeUpdateSchedule_12(
              this,
              Invocation.getter(#updateSchedule),
            ),
          )
          as _i6.UpdateSchedule);

  @override
  _i6.DeleteSchedule get deleteSchedule =>
      (super.noSuchMethod(
            Invocation.getter(#deleteSchedule),
            returnValue: _FakeDeleteSchedule_13(
              this,
              Invocation.getter(#deleteSchedule),
            ),
          )
          as _i6.DeleteSchedule);

  @override
  _i7.ScheduleState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeScheduleState_14(this, Invocation.getter(#state)),
          )
          as _i7.ScheduleState);

  @override
  _i8.Stream<_i7.ScheduleState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i7.ScheduleState>.empty(),
          )
          as _i8.Stream<_i7.ScheduleState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i7.ScheduleEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.ScheduleEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.ScheduleState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.ScheduleEvent>(
    _i9.EventHandler<E, _i7.ScheduleState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i7.ScheduleEvent, _i7.ScheduleState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i7.ScheduleState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
